
//
// This file is part of Lyricus.
// Copyright (c) 2008, Thomas Backman <serenity@exscape.org>
// All rights reserved.
//

#import "TBSongmeanings.h"
#import "NSString+ExscapeEdits.h"

@implementation TBSongmeanings

-(TBSongmeanings *) init {
	if (self = [super init]) {
		return self;
	}
	return nil;
}

#pragma mark -
#pragma mark Public

-(NSMutableArray *) fetchLyricsForTrack:(NSString *)title byArtist:(NSString *)artist {
	//
	// The only method called from the outside.
	//
	SendNote(@"Trying songmeanings...\n");
	SendNote(@"\tFetching song list...\n");
	
	NSString *artistURL = [self getURLForArtist:artist];
	if (artistURL == nil) {
		SendNote(@"\tArtist not found!\n");
		return nil;
	}
	SendNote(@"\tFetching lyric URL...\n");
	NSString *trackURL = [self getLyricURLForTrack:title fromArtistURL:artistURL];
	if (trackURL == nil) {
		SendNote(@"\tTrack not found!\n");
		return nil;
	}
	
	SendNote(@"\tFetching and parsing lyrics...\n");
	NSString *lyrics = [self extractLyricsFromURL:trackURL];
	if (lyrics == nil)
		return nil;
	
	//lyrics =[lyrics stringByAppendingString:@"\n\nLyrics from www.songmeanings.net"];
	return [NSMutableArray arrayWithObjects:trackURL, lyrics, nil];
}

#pragma mark -
#pragma mark Private/internal

-(NSString *)getURLForArtist:(NSString *) inArtist {
	//
	// Does a search for the artist name, and tries to return the URL to the artist's page,
	// which in turn contains a link to all the artist's songs.
	//
	
	if (inArtist == nil | [inArtist length] < 1)
		return nil;
	
	NSString *artist = [inArtist stringByReplacingOccurrencesOfString:@" " withString:@"+"];
	artist = [artist stringByAddingPercentEscapesUsingEncoding:NSISOLatin1StringEncoding];
	NSURL *url = [NSURL URLWithString: [NSString stringWithFormat:@"http://songmeanings.net/query.php?action=artists&query=%@", artist]];

	// Do the search and fetch results
	NSString *html = [TBUtil getHTMLFromURL:url];
	if (html == nil)
		return nil;
	
	// In some (many) cases, there'll only be one match, and SongMeanings will redirect us to the correct page;
	// in which case we have all we need!
	if (![html containsString:@"SongMeanings | search results for"] && ![html containsString:@" artists found"])
		return [url absoluteString];
	else if ([html containsString:@"0 artists found"])
		return nil;
	// else continue...

	NSString *regex = 
	//<tr class='row1'><td><a href="/artist/view/songs/17318/">Dark Tranquillity</a></td><td class='alignCenter valignTop'>101</td></tr>
	@"<td>\\s*<a href=\"/artist/view/songs/(\\d+)/\">(.*?)</a></td>";
//	@"<td>\\s*<a href=\"artist\\.php\\?aid=(\\d+)\" title=\"[^\"]*\">(.*?)</a>\\s*</td>";
	
	// Good ol' extract artist name loop.
	RKEnumerator *matchEnumerator = [html matchEnumeratorWithRegex:regex];
	NSString *matchedID, *matchedArtist;
	
	while ([matchEnumerator nextRanges] != NULL) {
		[matchEnumerator getCapturesWithReferences:@"$1", &matchedID, @"$2", &matchedArtist, nil];
		
		if ([artist isEqualToCharactersInString:matchedArtist ignoringCase:YES])
			return [NSString stringWithFormat:@"http://www.songmeanings.net/artist.php?aid=%@", matchedID];
	}

	return nil;
}

-(NSString *)getLyricURLForTrack:(NSString *)title fromArtistURL:(NSString *)artistURL {
	//
	// Given an artist URL and a track, this tries to return the URL to the actual lyric.
	//
	
	NSString *html = [TBUtil getHTMLFromURL:[NSURL URLWithString:artistURL]];
	if (html == nil) 
		return nil;
	NSString *regex = 
//	@"<a href=\"lyric\\.php\\?lid=(\\d+)\" title=\"[^\"]*\">(.*?)</a>";
	@"<td><a href=\"/songs/view/([^/]*)/\">(.*?)</a></td>";
	
	RKEnumerator *matchEnumerator = [html matchEnumeratorWithRegex:regex];
	NSString *matchedID, *matchedTitle;
	while ([matchEnumerator nextRanges] != NULL) {
		[matchEnumerator getCapturesWithReferences:@"$1", &matchedID, @"$2", &matchedTitle, nil];
		
		if ([TBUtil string:title isEqualToString:matchedTitle])
//			return [NSString stringWithFormat:@"http://www.songmeanings.net/lyric.php?action=printerfriendly&id=%@", matchedURL];
			return [NSString stringWithFormat:@"http://www.songmeanings.net/songs/view/%@/", matchedID];
	}
	return nil;
}

-(NSString *)extractLyricsFromURL:(NSString *)url {
	//
	// Given an URL and the track's name, tries to extract the lyrics.
	//
	if (url == nil)
		return nil;
	NSString *html = [TBUtil getHTMLFromURL:[NSURL URLWithString:url]];
	if (html == nil) return nil;
	
	// Why THE HELL is this required!?!! Took me HOURS of debugging to find out. Seems to break even with dot matches all,
	// so lets use this:
	html = [html stringByReplacingOccurrencesOfString:@"\r" withString:@""];
	html = [html stringByReplacingOccurrencesOfString:@"\n" withString:@""];

	NSString *match;
	NSString *regex = 
//	@"<div>\\s*<strong>[^<]*</strong> - <strong>[^<]*</strong>\\s*</div>\\s*<br/>\\s*<div>(.*)</div>\\s*<br\\s*/>";
	@"<!-- end ringtones -->(.*?)<!--ringtones and media links -->";

	RKEnumerator *enu = [html matchEnumeratorWithRegex:regex];

	while ([enu nextRanges] != NULL) {
		[enu getCapturesWithReferences:@"$1", &match, nil];
		if (match == nil) 
			return nil;
		match = [[match stringByReplacingOccurrencesOfString:@"<br />" withString:@"\n"] stringByTrimmingWhitespace];
		match = [match stringByMatching:@"<[^>]*>" replace:RKReplaceAll withReferenceString:@""];
		return match;
	}
	
	return nil;
}


@end
